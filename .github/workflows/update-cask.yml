name: Update Pulse Cask

on:
  schedule:
    - cron: '0 0 * * *' # Runs every day at midnight UTC
  workflow_dispatch: # Allows manual triggering from GitHub Actions UI

jobs:
  update_cask:
    runs-on: ubuntu-latest

    env:
      APP_NAME: 'pulse'
      TAP_REPO: '${{ github.repository }}'
      SOURCE_REPO: 'YiweiShen/pulse-app'
      ASSET_NAME_PATTERN_ARM: 'Pulse_aarch64.app.tar.gz'
      ASSET_NAME_PATTERN_INTEL: 'Pulse_x64.app.tar.gz'

    steps:
      - name: Check out Tap Repository
        uses: actions/checkout@v4

      - name: Get Latest Release Info from Source Repo
        id: get_release
        run: |
          LATEST_RELEASE_INFO=$(gh release view --repo ${{ env.SOURCE_REPO }} --json tagName,assets)
          echo "Release Info: $LATEST_RELEASE_INFO"

          LATEST_VERSION=$(echo "$LATEST_RELEASE_INFO" | jq -r '.tagName | ltrimstr("v")')
          echo "Latest Version: $LATEST_VERSION"

          ARM_ASSET_NAME=$(echo "${{ env.ASSET_NAME_PATTERN_ARM }}")
          INTEL_ASSET_NAME=$(echo "${{ env.ASSET_NAME_PATTERN_INTEL }}")

          ARM_ASSET_INFO=$(echo "$LATEST_RELEASE_INFO" | jq --arg name "$ARM_ASSET_NAME" -r '.assets[] | select(.name == $name)')
          INTEL_ASSET_INFO=$(echo "$LATEST_RELEASE_INFO" | jq --arg name "$INTEL_ASSET_NAME" -r '.assets[] | select(.name == $name)')

          if [ -z "$ARM_ASSET_INFO" ] || [ -z "$INTEL_ASSET_INFO" ]; then
            echo "::error::Could not find both ARM and Intel assets in release $LATEST_VERSION"
            exit 1
          fi

          ARM_ASSET_URL=$(echo "$ARM_ASSET_INFO" | jq -r '.url')
          INTEL_ASSET_URL=$(echo "$INTEL_ASSET_INFO" | jq -r '.url')

          echo "ARM Asset URL: $ARM_ASSET_URL"
          echo "Intel Asset URL: $INTEL_ASSET_URL"

          echo "latest_version=${LATEST_VERSION}" >> $GITHUB_OUTPUT
          echo "arm_asset_url=${ARM_ASSET_URL}" >> $GITHUB_OUTPUT
          echo "intel_asset_url=${INTEL_ASSET_URL}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Current Cask Version and SHA256
        id: get_cask_version
        run: |
          CURRENT_VERSION=$(grep -E '^\s*version\s+"([0-9.]+)"' Casks/${{ env.APP_NAME }}.rb | head -n 1 | sed -E 's/.*"([^"]+)".*/\1/')
          CURRENT_ARM_SHA256=$(grep -E '^\s*sha256\s+arm:\s+"([a-f0-9]+)"' Casks/${{ env.APP_NAME }}.rb | head -n 1 | sed -E 's/.*"([^"]+)".*/\1/')
          CURRENT_INTEL_SHA256=$(grep -E '^\s*sha256\s+intel:\s+"([a-f0-9]+)"' Casks/${{ env.APP_NAME }}.rb | head -n 1 | sed -E 's/.*"([^"]+)".*/\1/')

          echo "Current Cask Version: $CURRENT_VERSION"
          echo "Current ARM SHA256: $CURRENT_ARM_SHA256"
          echo "Current Intel SHA256: $CURRENT_INTEL_SHA256"

          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          echo "current_arm_sha256=${CURRENT_ARM_SHA256}" >> $GITHUB_OUTPUT
          echo "current_intel_sha256=${CURRENT_INTEL_SHA256}" >> $GITHUB_OUTPUT

      - name: Compare Versions and Update Cask if Necessary
        if: steps.get_release.outputs.latest_version != steps.get_cask_version.outputs.current_version
        run: |
          echo "New version found: ${{ steps.get_release.outputs.latest_version }}. Updating cask..."
          LATEST_VERSION="${{ steps.get_release.outputs.latest_version }}"
          ARM_ASSET_URL="${{ steps.get_release.outputs.arm_asset_url }}"
          INTEL_ASSET_URL="${{ steps.get_release.outputs.intel_asset_url }}"

          CASK_FILE="Casks/${{ env.APP_NAME }}.rb"

          # Download and calculate SHA256 for ARM
          echo "Downloading ARM asset..."
          curl -L -o "arm_asset.tar.gz" "$ARM_ASSET_URL"
          ARM_SHA256=$(sha256sum "arm_asset.tar.gz" | awk '{print $1}')
          rm "arm_asset.tar.gz"
          echo "ARM SHA256: $ARM_SHA256"

          # Download and calculate SHA256 for Intel
          echo "Downloading Intel asset..."
          curl -L -o "intel_asset.tar.gz" "$INTEL_ASSET_URL"
          INTEL_SHA256=$(sha256sum "intel_asset.tar.gz" | awk '{print $1}')
          rm "intel_asset.tar.gz"
          echo "Intel SHA256: $INTEL_SHA256"

          # Update the Cask file
          sed -i.bak -E "s/^(\s*version\s+\")[^\"]+(\".*)/\1${LATEST_VERSION}\2/" "$CASK_FILE"
          sed -i.bak -E "s/^(\s*sha256\s+arm:\s+\")[^\"]+(\".*)/\1${ARM_SHA256}\2/" "$CASK_FILE"
          sed -i.bak -E "s/^(\s*sha256\s+intel:\s+\")[^\"]+(\".*)/\1${INTEL_SHA256}\2/" "$CASK_FILE"
          sed -i.bak -E "s|^(\s*url\s+\").*aarch64.*(\".*)|\1${ARM_ASSET_URL}\2|" "$CASK_FILE"
          sed -i.bak -E "s|^(\s*url\s+\").*x64.*(\".*)|\1${INTEL_ASSET_URL}\2|" "$CASK_FILE"

          rm "${CASK_FILE}.bak"

          echo "Cask file updated."

          # Commit and Push Changes
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

          git add "$CASK_FILE"
          git commit -m "Update ${APP_NAME} cask to v${LATEST_VERSION}"

          git pull --rebase
          git push
          echo "Changes pushed to repository."

      - name: No Update Needed
        if: steps.get_release.outputs.latest_version == steps.get_cask_version.outputs.current_version
        run: echo "Cask version ${{ steps.get_cask_version.outputs.current_version }} is already up-to-date."
